

<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="spm-id" content="a2140" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="renderer" content="webkit">
    <link rel="shortcut icon" href="https://img.alicdn.com/tps/TB1CnEWKFXXXXXUXVXXXXXXXXXX-32-32.png" type="image/x-icon" /> 
    <title>  - 淘工作</title>
    <meta name="description" content=" ,阿里巴巴集团旗下招聘平台，求职，找工作，招聘网">
    <meta name="keywords" content="淘工作,找工作,求职">
    <link rel="stylesheet" href="//img.imaijia.com/tbtx/zhaopin/2.0/css/base.css"/>
	<link rel="stylesheet" href=" ">
	<script src="//img.imaijia.com/tbtx/base/2.5/js/??tbtx.js,combo.js"></script>
     
    <script>
    tbtx.require("//img.imaijia.com/tbtx/zhaopin/2.0/js/base");
    </script>
<script>
    tbtx.require("//img.imaijia.com/tbtx/zhaopin/site/base");
</script>
	<script src=" "></script>
	<script src="//g.alicdn.com/sechook/sechook-uncover/0.2.8/mpurify.min.js" id="data-sechook-update"></script>
</head>
<body data-spm="  ">
<!--通栏banner-->
<a href='void:;' target='_blank' class='pc-resource-place1'  ></a>
<!--通栏bannerend-->


  <div class="sit-nav-bd" data-spm="">
    <div class="w1190 clearfix">
      
    </div>
  </div>
<div class="sit-nav-content" data-spm="">
    <div class="w1190">
	    <div class="header-cont pr">
	        <div class="logo fl">
	          <a href="/" class="png" ><h1><img src="https://img.alicdn.com/imgextra/i4/1060815481/TB2D40Cco.jyKJjy0FpXXX2wVXa_!!2-mtopupload.png" alt="淘工作">淘工作</h1></a>
	        		        </div>
	        <div class="nav-category pr">
	          <h3>精选职位分类 <span class="nav-arrow"></span></h3>
	          <div class="category-nav-wrap pr"> 
			        <ul class="category-box">
      	  	 			<li>
      	  	 				<h4 class="category_type1">运营 <img src="https://img.alicdn.com/tps/TB1TaaZJVXXXXc8XFXXXXXXXXXX-7-13.png" class="cata-arrow" /></h4>
			        		<div class="category_second">
						 	<a href="/job.htm?categoryFirstId=108002&categorySecondId=108002016">运营总监/经理</a>
						 	<a href="/job.htm?categoryFirstId=108002&categorySecondId=108002013">店长/运营主管</a>
							<a href="/job.htm?categoryFirstId=108002&categorySecondId=108002001" class="newitem-nav">运营专员</a>
						 	<a href="/job.htm?categoryFirstId=108002&categorySecondId=108002007">新媒体运营</a>
	   		 				</div>
			              <div>
				              <div class="bd-right"></div>
				              <div class="bd-left"></div>
				              <div class="bd-bd"></div>
				              <div class="bd-top"></div>
			              </div>
			            </li>
      	  	 			<li>
      	  	 				<h4 class="category_type2">客服 <img src="https://img.alicdn.com/tps/TB1TaaZJVXXXXc8XFXXXXXXXXXX-7-13.png" class="cata-arrow" /></h4>
			        		<div class="category_second">
						 	<a href="/job.htm?categoryFirstId=108003&categorySecondId=108003006">客服总监/经理</a>
						 	<a href="/job.htm?categoryFirstId=108003&categorySecondId=108003004"> 客服主管</a>
							<a href="/job.htm?categoryFirstId=108003&categorySecondId=108003001" class="newitem-nav">淘宝客服</a>
						 	<a href="/job.htm?categoryFirstId=108003&categorySecondId=108003002">售前客服</a>
	   		 				</div>
			              <div>
				              <div class="bd-right"></div>
				              <div class="bd-left"></div>
				              <div class="bd-bd"></div>
				              <div class="bd-top"></div>
			              </div>
			            </li>
      	  	 			<li>
      	  	 				<h4 class="category_type3">设计 <img src="https://img.alicdn.com/tps/TB1TaaZJVXXXXc8XFXXXXXXXXXX-7-13.png" class="cata-arrow" /></h4>
			        		<div class="category_second">
						 	<a href="/job.htm?categoryFirstId=108004&categorySecondId=108004011">设计总监/资深主设</a>
						 	<a href="/job.htm?categoryFirstId=108004&categorySecondId=108004001">视觉设计</a>
						 	<a href="/job.htm?categoryFirstId=108004&categorySecondId=108004002">网页设计</a>
						 	<a href="/job.htm?categoryFirstId=108004&categorySecondId=108004004">摄影师</a>
						 	<a href="/job.htm?categoryFirstId=108004&categorySecondId=108004007">买手</a>
	   		 				</div>
			              <div>
				              <div class="bd-right"></div>
				              <div class="bd-left"></div>
				              <div class="bd-bd"></div>
				              <div class="bd-top"></div>
			              </div>
			            </li>
      	  	 			<li>
      	  	 				<h4 class="category_type4">推广 <img src="https://img.alicdn.com/tps/TB1TaaZJVXXXXc8XFXXXXXXXXXX-7-13.png" class="cata-arrow" /></h4>
			        		<div class="category_second">
						 	<a href="/job.htm?categoryFirstId=108005&categorySecondId=108005009">推广总监/经理</a>
						 	<a href="/job.htm?categoryFirstId=108005&categorySecondId=108005003">网店推广</a>
						 	<a href="/job.htm?categoryFirstId=108005&categorySecondId=108005006">直通车推广</a>
						 	<a href="/job.htm?categoryFirstId=108005&categorySecondId=108005004">营销策划</a>
	   		 				</div>
			              <div>
				              <div class="bd-right"></div>
				              <div class="bd-left"></div>
				              <div class="bd-bd"></div>
				              <div class="bd-top"></div>
			              </div>
			            </li>
      	  	 			<li>
      	  	 				<h4 class="category_type5">物流仓储 <img src="https://img.alicdn.com/tps/TB1TaaZJVXXXXc8XFXXXXXXXXXX-7-13.png" class="cata-arrow" /></h4>
			        		<div class="category_second">
						 	<a href="/job.htm?categoryFirstId=108007&categorySecondId=108007001">供应链管理</a>
						 	<a href="/job.htm?categoryFirstId=108007&categorySecondId=108007002">物流专员</a>
							<a href="/job.htm?categoryFirstId=108007&categorySecondId=108007003" class="newitem-nav">仓储</a>
						 	<a href="/job.htm?categoryFirstId=108007&categorySecondId=108007004">快递员</a>
	   		 				</div>
			              <div>
				              <div class="bd-right"></div>
				              <div class="bd-left"></div>
				              <div class="bd-bd"></div>
				              <div class="bd-top"></div>
			              </div>
			            </li>
      	  	 			<li>
      	  	 				<h4 class="category_type6">技术 <img src="https://img.alicdn.com/tps/TB1TaaZJVXXXXc8XFXXXXXXXXXX-7-13.png" class="cata-arrow" /></h4>
			        		<div class="category_second">
						 	<a href="/job.htm?categoryFirstId=108006&categorySecondId=108006011">技术总监/经理</a>
						 	<a href="/job.htm?categoryFirstId=108006&categorySecondId=108006003">JAVA开发工程师</a>
						 	<a href="/job.htm?categoryFirstId=108006&categorySecondId=108006004">PHP开发工程师</a>
						 	<a href="/job.htm?categoryFirstId=108006&categorySecondId=108006006">数据库工程师</a>
	   		 				</div>
			              <div>
				              <div class="bd-right"></div>
				              <div class="bd-left"></div>
				              <div class="bd-bd"></div>
				              <div class="bd-top"></div>
			              </div>
			            </li>
      	  	 			<li>
      	  	 				<h4 class="category_type7">其他 <img src="https://img.alicdn.com/tps/TB1TaaZJVXXXXc8XFXXXXXXXXXX-7-13.png" class="cata-arrow" /></h4>
			        		<div class="category_second">
						 	<a href="/job.htm?categoryFirstId=108999&categorySecondId=108999004">财务</a>
						 	<a href="/job.htm?categoryFirstId=108999&categorySecondId=108999011">销售</a>
						 	<a href="/job.htm?categoryFirstId=108999&categorySecondId=108999002">行政</a>
						 	<a href="/job.htm?categoryFirstId=108999&categorySecondId=108999003">人力资源</a>
						 	<a href="/job.htm?categoryFirstId=108999&categorySecondId=108999001">模特</a>
	   		 				</div>
			              <div>
				              <div class="bd-right"></div>
				              <div class="bd-left"></div>
				              <div class="bd-bd"></div>
				              <div class="bd-top"></div>
			              </div>
			            </li>
			        </ul>
			          <!--右边按弹出子类-->
				 	<div class="menu_sub db"></div>
				    <div class="menu_sub db"></div>
				    <div class="menu_sub db"></div>
				    <div class="menu_sub db"></div>
				  	<div class="menu_sub db"></div>
				  	<div class="menu_sub db"></div>
				  	<div class="menu_sub db"></div>
	          </div>
	        </div>
	        <ul class="header-nav-new15">
	          <li>
	            <a href="/" >首页</a>
	          </li>
	          <li>
		        <a href="/job.htm">职位</a>
		      </li>
	          <li>
	            <a href="/company.htm">企业</a>
	        </li>
	        <li>
	            <a href="/talk.htm">职道</a>
	        </li>
	        </ul>
	        <div class="index-search fr">
		        <div class="search-boxnew pr">
		            <div id="searchwrap">
		              <input type="text" name="keyword" value="" placeholder="请输入职位名称或企业名称" class="index-search-input fl">
		              <input type="button" value=" 搜索" class="index-search-bth fr">
		            </div>
		          	<div class="hot_job header-search-items-wrap">
		                <span>热门搜索：</span>
		                <div class="hot-search-items">
		                </div>
		          	</div>
	          	</div>
	        </div>
	     </div>
    </div>
</div>
  
 gfdgfgfdfdsfdsfdsf
<div id = "vd1" style="width: 400px;height:400px;">

  </div>
  <script src="//img.imaijia.com/tbtx/zhaopin/2.0/js/common.js"></script>
  <script>
  tbtx.require("//img.imaijia.com/tbtx/zhaopin/activity/video/index.js");
  </script>
<script type="text/javascript">
    /*
     * 事件绑定的三种形式：1dom原生绑定2js事件绑定3事件监听
     * addEventListener(evnet,function,capture)ie8,ie8以下不支持
     * 事件监听的优点:可以绑定多个事件（常规的绑定如onclick只能执行最后一个绑定）2.可以去除绑定如 removeEventListener("click",hello)
     *捕获阶段 目标阶段 冒泡阶段 e.preventDefault() event.stopPropagation()
     */

    document.getElementById("j-bt1").addEventListener("click", function(e) {}, true);

    var nameArray = document.getElementById("j-bt1").childNodes;
    for (var i = 0; i < nameArray.length; i++) {
        console.log(nameArray[i].nodeType)
        console.log(nameArray[i].nodeName)
        console.log(nameArray[i].nodeValue)
        console.log(nameArray[i].innerText)
    }


    //原生监听事件封装
    // var EventUtil = {

    //     // 添加事件监听
    //     add: function(element, type, callback){

    //         if(element.addEventListener){
    //             element.addEventListener(type, callback, false);
    //         } else if(element.attachEvent){
    //             element.attachEvent('on' + type, callback);
    //         } else {
    //             element['on' + type] = callback;
    //         }
    //     },

    //     // 移除事件监听
    //     remove: function(element, type, callback){

    //         if(element.removeEventListener){
    //             element.removeEventListener(type, callback, false);
    //         } else if(element.detachEvent){
    //             element.detachEvent('on' + type, callback);
    //         } else {
    //             element['on' + type] = null;
    //         }

    //     },

    //     // 跨浏览器获取 event 对象
    //     getEvent: function(event){

    //         return event ? event : window.event;
    //     },

    //     // 跨浏览器获取 target 属性
    //     getTarget: function(event){

    //         return event.target || event.srcElement;
    //     },

    //      阻止事件的默认行为
    //     preventDefault: function(event){

    //         if(event.preventDefault){
    //             event.preventDefault();
    //         } else {
    //             event.returnValue = false;
    //         }
    //     },

    //     // 阻止事件流或使用 cancelBubble
    //     stopPropagation: function(){

    //         if(event.stopPropagation){
    //             event.stopPropagation();
    //         } else {
    //             event.cancelBubble = true;
    //         }
    //     } 
    // }; 

    //querySelector


    //event.target(ie6-8不支持需要event.srcElement代替) 

    $("body").append("<div class='j-bt4' id='j-bt4'>4343eee</div>");

    //事件委托机制：基于JS的事件冒泡，可以以JS事件委托的方式，在父元素上，给父元素的子元素绑定事件，同时减少事件绑定的时间复杂度。 

    // myUl.addEventListener('click',function(ev){ 

    //     var ev= ev||window.ev; 

    //     if(ev.target.nodeName.toLocaleLowerCase()=='li'){ 

    //      ev.target.style.backgroundColor="black";

    //     }

    //  }); 

    // getElementById()//

    // getElementsByName() 方法可返回带有指定名称的对象的集合

    // getElementsByTagName() 方法可返回带有指定名称的对象的集



    /***时间格式转换***/
    var arr1 = new Date("2014,12,11 14:15:45");

    Date.prototype.format = function(fmt) { //fmt时间戳  将时间转化为某个格式的时间            
        var o = {
            "M+": this.getMonth() + 1, //月份
            "d+": this.getDate(), //日
            "h+": this.getHours(), //小时
            "m+": this.getMinutes(), //分
            "s+": this.getSeconds(), //秒
            "q+": Math.floor((this.getMonth() + 3) / 3), //季度
            "S": this.getMilliseconds() //毫秒
        };
        if (/(y+)/.test(fmt)) {
            fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
        }
        for (var k in o) {
            if (new RegExp("(" + k + ")").test(fmt)) {
                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
            }
        }
        return fmt;
    };

    arr1.format("yyyy/MM/dd hh:mm:ss"); //2014/12/11 14:15:45 


    //cookie获取
    date1 = new Date();
    document.cookie = 'name=’+encodeURIComponent("ad")+‘;expires=' + date1.toGMTString() + ";path=/;" //设置cookie一般三个参数就够了 date1为Date对象

    //cookie获取：cookie是通过一个分号+空格的形式串联起来的，所以这里需要先按分号空格截断 需要匹配才能取到对应的cookie  
    function getCookie(key) {
        var arr1 = document.cookie.split("; "); //由于cookie是通过一个分号+空格的形式串联起来的，所以这里需要先按分号空格截断,变成[name=Jack,pwd=123456,age=22]数组类型；
        for (var i = 0; i < arr1.length; i++) {
            var arr2 = arr1[i].split("="); //通过=截断，把name=Jack截断成[name,Jack]数组；
            if (arr2[0] == key) {
                return decodeURI(arr2[1]);
            }
        }
    };

    //cookie删除 
    function delCookie(name) {
        var ex = new Date();
        ex.setTime(ex.getTime() - 1);
        document.cookie = name + "=; expires=" + ex.toGMTString() + ";path=/";
    };

    //Array方法
    //concat(variable) 返回一个新的Array
    // 返回一个新的数组。该数组是通过把所有 arrayX 参数添加到 arrayObject 中生成的。如果要进行 concat() 操作的参数是数组，那么添加的是数组中的元素，而不是数组。  

    //push(variable)   改变原数组返回一个新的长度
    //pop()            改变原数组返回最后一个数据 
    //shift() 与 pop()对应,移除头部一个数据，并返回该移除数据
    //unshift 头部数据添加并返回新的长度，改变原数据  
    //slice(num,num) 切分  数组 选择特定数据   第一个从0开始。 如果 第一个负数就无意义了 
    //slice()方法在第一个参数为负数时不管第二个参数为正数还是负数都会返回[]空数组；第二个参数为负数时会将负的参数加上字符串的长度。
    var arr5 = [1, 2, 3];
    var arr6 = arr5.concat(4, 5);
    console.log(arr6);

    //JSON.stringify(obj)       将JSON对象转为字符串。
    //JSON.parse(string)       将字符串转为JSON对象格式。 

    //encodeURIComponent() 函数可把字符串作为 URI 组件进行编码

    //decodeURIComponent() 对编码后的 URI 进行解码

    //RegExp 
    //[]方括号中某个，[^]非方括号中的某个 () 是为了提取匹配的字符串
    // . 查找单个字符，除了换行和行结束符。
    // \w 查找单词字符。
    // \W 查找非单词字符。
    // \d 查找数字。
    // \D 查找非数字字符
    var regCommon = /^(\d+)(\.\d+)$/gi;

    // "^\\d+$"　　//非负整数（正整数 + 0） 
    // "^[0-9]*[1-9][0-9]*$"　　//正整数 

    // "^(-?\\d+)(\\.\\d+)?$"　　//浮点数 
    // "^[A-Za-z]+$"　　//由26个英文字母组成的字符串 
    // "^[A-Z]+$"　　//由26个英文字母的大写组成的字符串 
    // "^[a-z]+$"　　//由26个英文字母的小写组成的字符串 
    // "^[A-Za-z0-9]+$"　　//由数字和26个英文字母组成的字符串  


    //0. 在使用以上跳转方法进行跳转的时候，需要根据业务需求配置安全域白名单，对URL进行白名单校验,示例校验函数如下 ：
    function parseURL_TICKTICK(url, allowDomains) {
        //必须使用统一的特殊函数名，方便检测
        //allowDomains禁止适配`*`通配符 
        var domainStr = "",
            i = 0,
            result = [];
        for (i; i < allowDomains.length; i++) {
            allowDomains[i] = "(" + allowDomains[i].replace(".", "\\.") + ")";
        }
        domainStr = "(" + allowDomains.join("|") + ")";
        regStr = new RegExp("^((http://)|(https://)|(//))?([0-9a-zA-Z\\._:\\-]*[\\.@])?" + domainStr + "(:[0-9]+)?(\/.*)?$");
        // ^((http:\/\/)|(https:\/\/)|(\/\/))?([0-9a-zA-Z\._:\-]*[\.@])?((taobao\.com)|(alibaba\.com)(:[0-9]+)?(\/.*)?$/
        result = url.match(regStr);
        return !!(result && result[0]);
    }

    //获取class方法
    function hasClass(elements, cName) {
        return !!elements.className.match(new RegExp("(\\s|^)" + cName + "(\\s|$)"));
    };

    function addClass(elements, cName) {
        if (!hasClass(elements, cName)) {
            elements.className += " " + cName;
        };
    };

    function removeClass(elements, cName) {
        if (hasClass(elements, cName)) {
            elements.className = elements.className.replace(new RegExp("(\\s|^)" + cName + "(\\s|$)"), " ");
        };
    };
    
    //端口适配
    if (/AppleWebKit.*Mobile/i.test(navigator.userAgent) || /\(Android.*Mobile.+\).+Gecko.+Firefox/i.test(navigator.userAgent) || (/MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE/.test(navigator.userAgent))) {
        if (window.location.href.indexOf("?mobile") < 0) {
            try {
                if (/Android|Windows Phone|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) {
                    window.location.href = "https://xw.qq.com?f=qqcom";
                } else if (/iPad/i.test(navigator.userAgent)) {
                    //window.location.href="http://www.qq.com/pad/"
                } else {
                    window.location.href = "http://xw.qq.com/simple/s/index/"
                }
            } catch (e) {}
        }
    }


    //动态载入js 
    jQuery.getScript("/path/to/myscript.js", function(data, status, jqxhr) {/*做一些加载完成后需要执行的事情*/ });
 
    var oHead = document.getElementsByTagName('HEAD').item(0);  
    var oScript= document.createElement("script");  
    oScript.type = "text/javascript";  
    oScript.src= 'https://s22.cnzz.com/z_stat.php?id='+siteId+'&web_id='+siteId; 
    oHead.appendChild(oScript);
    

// * ./ 表示当前目录下 
// * ../ 表示父级目录下 
// * @/ 是webpack设置的路径别名，代表什么路径，要看webpack的build文件夹下webpack.base.conf.js里面对于@是如何配置



main.js 
import Vue from 'vue';
import App from './App.vue';  
import router from './router'   //引入路由   这里的引入名router可以改为其他但下面属性就不能简写了如改为router1 


//main.js  vue渲染的形式有两种 1.template直接渲染   2.render:h => h(app) 



// 第一种

new Vue({

  data:{

  },

  components:{

  },

  template:"<div></div>"   //第一种渲染方式



})



// 第二种：

new Vue({

  data:{

  },

  components:{

  },

  render:h=>h(app)//app为组件

})





引用子组件的两种形式：

1.es6 import 引用形式

<template>
    <div>
        <!-- 3.在template中就可以直接使用了 -->
        <testComponent></testComponent>
    </div>
</template>
 
 
    //1.先使用import导入你要在该组件中使用的子组件
    import testComponent from './testComponent.vue'
    export default {
        //2.然后,在components中写入子组件
        components: {testComponent},
        methods: {},
    }
 

 //2.es5require引用形式

export default {
        //1.直接在components中写入子组件
        components: {
            testComponent:require('./testComponent.vue').default
        },
        methods: {},
    } 



//样式的引用

<style scoped>
    @import '../../assets/css/home.css';  
</style>
/*这样写的话import的css文件会被编译为全局样式，但是引入less等预编译文件，就会局部生效*/
 
2.
<style src="../../assets/css/home.css" scoped>
</style>



//3.如何在当前组件定义子组件样式

 // .parentComponetNode  /deep/  .childComponetNode //一种方式
 // .parentComponetNode  >>>  .childComponetNode //一种方式





// 组件中样式的影响

// 1.子组件根元素会继承父组件根元素的某些样式（字体颜色，大小等），

// 2.父元素有scoped则无法设置子组件非根元素的样式（通过 /deep/ 或>>>可以）

// 3.兄弟组件有scoped会相互阻止



// 通过事件向父组件发送消息









// 理解组件的创建和注册  (必须有个单个根文件)
// 我们用以下几个步骤来理解组件的创建和注册：

// 1. Vue.extend()是Vue构造器的扩展，调用Vue.extend()创建的是一个组件构造器，而不是一个具体的组件实例。 
// 2. Vue.extend()构造器有一个选项对象，选项对象的template属性用于定义组件要渲染的HTML。 
// 3. 使用Vue.component()注册组件时，需要提供2个参数，第1个参数时组件的标签，第2个参数是组件构造器。 
// 4. Vue.component()方法内部会调用组件构造器，创建一个组件实例。 
// 5. 组件应该挂载到某个Vue实例下，否则它不会生效。


//vue构造器

var myComponent = Vue.extend({
    template: '<div>This is a component!</div>'
})



//组件注册的tagname 大写的字母，标签大小都可以，小写则不行；如Clock    <clock>



// 标签名寻找对应的自定义组件。匹配的优先顺序从高到低为：原标签名、camelCase化的标签名、PascalCase化的标签名。

// 例如 <my-component> 会依次匹配 my-component、myComponent、MyComponent。



// 父组件与子组件的数据传递props down & evnet up



// props传递数据(单向传递，不能从子节点到父节点)

// 子组件中props:['childTitle'] ，父组件<test3 :child-title="data2"></test3>

 

 <test3 :child-title="data2" v-for="item in posts" :keyId="item.id" :title="item.title" :item="item"></test3>

return {
          msg:"hello22222",
          data2:"哈哈",
          posts: [
            { id: 1, title: 'My journey with Vue' },
            { id: 2, title: 'Blogging with Vue' },
            { id: 3, title: 'Why Vue is so fun' }
          ]
       }
 

 

<div>博文标题：{{item.id}}</div>

 props:['childTitle',"keyId","title","item"],


// 注：props中属性引用跟data一样用this即可如：this.'childTitle' 


// 子组件像父组件发射事件改变值父组件值

//    子组件自定义事件及触发

   <button v-on:click="$emit('enlarge-text')">
   this.$emit('increment1',”这个位子是可以加参数的”)；其实它的作用就是触发自定义函数。 



 // 父组件接受
  <test3 @increment1="changeTitle2"></test3>





// 数据循环时，当前的字段如id为循环时的字段可以单独拿来用

 <test3 :child-title="data2" v-for="item in posts" @changeTitle1="changeTitle2($event,item.id)" click :keyId="item.id"



//自定义事件也可以用于创建支持 v-model 的自定义输入组件 

<currency-input v-model="price"></currency-input>   price为一个值，通过子组件内input返回

 <input type="text" :value="currentValue" @input="handleInput"/>
handleInput(event) {
      var value = event.target.value;
      this.$emit('input', value); //触发 input 事件，并传入新值
    }
<custom-input
  :value="something"
  @input="value => { something = value }">
</custom-input>

 
 
 
// 通过插槽分发内容(slot)
// 插槽内可以包含任何模板代码，包括 HTML
// 如:
<navigation-link url="/profile">  <!-- 添加一个 Font Awesome 图标 -->  <span class="fa fa-user"></span>  Your Profile</navigation-link>
 
//具名插槽  需对应
 <slot name="header"></slot>
 <navigation-link url="/profile">  <p slot="header"></p></navigation-link>




//router文件夹下的index.js

import Vue from 'vue'
import Router from 'vue-router'

Vue.use(Router)  //Vue全局使用Router

export default new Router({
  routes: [              //配置路由，这里是个数组
    {                    //每一个链接都是一个对象
      path: '/index',         //链接路径
      name: 'index',     //路由名称，
      component: index,  //对应的组件模板 
      // children:[
      //   {path:'/',component:ajax},
      //   {path:'ajax',component:ajax},
      //   {path:'ajax2',component:ajax2},
      // ]
    }

]


// .1. 在beforeCreate和created钩子函数之间的生命周期
// 在这个生命周期之间，进行初始化事件，进行数据的观测，可以看到在created的时候数据已经和data属性进行绑定（放在data中的属性当值发生改变的同时，视图也会改变）。
// 注意看下：此时还是没有el选项https://www.cnblogs.com/wangking/p/6542352.html 知识点
// vue 方法放置顺序
components  2.props  3.data  4.created  5.mounted  6.activited  7.update  8.beforeRouteUpdate  9.metods 10.filter  11.computed 12watch

    props的两种类型：

   1.props: ['title', 'likes', 'isPublished', 'commentIds', 'author']，以字符串数组的形式列出

   2.props: {//对象形式
    // 基础的类型检查 (`null` 匹配任何类型)
    propA: Number,
    // 多个可能的类型
    propB: [String, Number],
    // 必填的字符串
    propC: {
      type: String,
      required: true
    }
  }



//is 确定当前是哪个component （<component>是固定标签）

1.<component :is="mms" ></component>  //使用comment标签，使用:is进行绑定数据mms,通过mms变量可以为data数据或者methods中方法如下

data(){

    return {

     mms:"test5"   //test5为组件对象名 

    }

}
 

<component  :is="currentView"></component>//如果他方法，那么最后返回的还需要是data上的数据,但必须放computed中而非methods中，component中方法会自动执行

computed:{

   currentView(){

     return this.mms = "test5";

   }

} 


<keep-alive>是Vue的内置组件，能在组件切换过程中将状态保留在内存中，防止重复渲染DOM。keep-alive porp include

include: 字符串或正则表达式。只有匹配的组件会被缓存。 
exclude: 字符串或正则表达式。任何匹配的组件都不会被缓存。
<keep-alive include="a,b"> <!-- 将缓存name为a或者b的组件，结合动态组件使用 -->



结合router，缓存部分页面(https://www.cnblogs.com/sysuhanyf/p/7454530.html)
使用$route.meta的keepAlive属性：

<keep-alive> <router-view v-if="$route.meta.keepAlive"></router-view> </keep-alive>

export default new Router({
  routes: [
    {
      path: '/',
      name: 'Hello',
      component: Hello,
      meta: {
        keepAlive: false // 不需要缓存
      }
    },
    {
      path: '/page1',
      name: 'Page1',
      component: Page1,
      meta: {
        keepAlive: true // 需要被缓存
      }
    }
  ]
})





//vue对离开进入列表提供多种不同方式的应用过渡效果

 <transition name="fade">
      <p v-if="show">hello</p>
</transition> 

.fade-enter-active, .fade-leave-active {
  transition: opacity .5s;
}
.fade-enter, .fade-leave-to /* .fade-leave-active below version 2.1.8 */ {
  opacity: 0;
}

//https://segmentfault.com/q/1010000012110272(组件的过度)



//混入：

//mixins就是定义一部分公共的方法或者计算属性,然后混入到各个组件中使用,方便管理与统一修改

 
export const mixinTest1 = {//组件的方法和数据
    data(){
       return {}
   },
  created(){
  },
  methods:{
 }
}
 
Vue.component("a",{
mixins:[mixinTest1],
}) 
 
//对于 methods, components 和 directives 将合并到同一个对象内。如果键冲突则组件的优先   自定义指令  Vue.directive('focus', {  // 当被绑定的元素插入到 DOM 中时……  inserted: function (el) {    // 聚焦元素    el.focus()  }}) 调用插件：通过全局方法 Vue.use() 使用插件。它需要在你调用 new Vue() 启动应用之前完Vue.use(myplugin)  


// 生命周期详解：

// 1. 在beforeCreate和created钩子函数之间的生命周期
// 在这个生命周期之间，进行初始化事件，进行数据的观测，可以看到在created的时候数据已经和data属性进行绑定（放在data中的属性当值发生改变的同时，视图也会改变）。
// 注意看下：此时还是没有el选项

// 2.created钩子函数和beforeMount间的生命周期
// 首先会判断对象是否有el选项。如果有的话就继续向下编译，如果没有el选项，则停止编译，也就意味着停止了生命周期，直到在该vue实例上调用vm.$mount(el)。

// 在mounted之前h1中还是通过{{message}}进行占位的，因为此时还有挂在到页面上，还是JavaScript中的虚拟DOM形式存在的。在mounted之后可以看到h1中的内容发生了变化。





vue基础常识

1.vue 布尔值false可以null,undefined,false(但没有“”空字符串)；

2.v-if  v-else-if v-else

3.

 watch: {
    // 如果 `question` 发生改变，这个函数就会运行
    question: function (newQuestion, oldQuestion) {
      this.answer = 'Waiting for you to stop typing...'
      this.debouncedGetAnswer()
    }
  },

 
4v-for='(value, key, index) in object '


Vue.set(object, key, value)



改变data或者添加属性

Vue.set(vm.userProfile, 'age', 27)
vm.$set(vm.userProfile, 'age', 27)

多个属性

vm.userProfile = Object.assign({}, vm.userProfile, {
  age: 27,
  favoriteColor: 'Vue Green'
})





v-for 和v-if一起是v-for优先级更高





事件修饰符号：.stop  .prevent  .capture  .self  .once  .passive

    Array
     //concat(variable) 返回一个新的Array

     返回一个新的数组。该数组是通过把所有 arrayX 参数添加到 arrayObject 中生成的。如果要进行 concat() 操作的参数是数组，那么添加的是数组中的元素，而不是数组。 


       //push(variable)   改变原数组返回一个新的长度
       //pop()            改变原数组返回最后一个数据 
       //shift() 与 pop()对应,移除头部一个数据，并返回该移除数据
       //unshift 头部数据添加并返回新的长度，改变原数据 
       //slice(num,num) 切分  数组 选择特定数据   第一个从0开始。 如果 第一个负数就无意义了

      //slice()方法在第一个参数为负数时不管第二个参数为正数还是负数都会返回[]空数组；第二个参数为负数时会将负的参数加上字符串的长度。






 正则

 // /pattern/attribute    //正则直接量写法

  // new RegExp(pattern, attributes); //创建regexp对象的方法

  //参数 pattern 是一个字符串，指定了正则表达式的模式或其他正则表达式。

  //参数 attributes 是一个可选的字符串，包含属性 "g"、"i" 和 "m"，分别用于指定全局匹配、区分大小写的匹配和多行匹配。

  RegExp对象的方法有test(), 

   String的正则方式match (),replace()






事件

element.addEventListener(event, function, useCapture)


event : （必需）事件名，支持所有 DOM事件 。

function：（必需）指定要事件触发时执行的函数。

useCapture：（可选）指定事件是否在捕获或冒泡阶段执行。true，捕获。false，冒泡。默认false。

注：IE8以下不支持。

document.getElementById("bt1").addEventListener("click",function(){
    })

/*
  * 事件绑定的三种形式：1dom原生绑定2js事件绑定3事件监听
  * addEventListener(evnet,function,capture)ie8以下不支持
  * 事件监听的优点:可以绑定多个事件（常规的绑定如onclick只能执行最后一个绑定）2.可以去除绑定如 removeEventListener("click",hello)
  *捕获阶段 目标阶段 冒泡阶段 e.preventDefault() event.stopPropagation()
  */
  document.getElementById("j-bt1").addEventListener("click",function(e){
     
  },true);


  ES6

 let w='www';
 let obj1={w};//obj1={w:'www'},属性与值相同，简写
 let obj2={[w]:'b'};//obj2={www:'b'},支持[]变量定义属性
 let obj3={['w'+'s']:'c'};//obj3={ws:'c'},[]内支持表达式运算定义变量
 let obj4={'mr chen':'d'};//obj4['mr chen']='d';es6支持空格存在于属性中
 let obj5={fun(){}};//obj5={fun:function(){}}支持简写方法属性
 let obj6={['f'+'un'](){}};//obj6={fun:function(){}};//同样方法属性名也可以字符拼接
 
 /////////Object.keys遍历属性/////////
 let obj={a:1,b:2,c:3}
 Object.keys(obj)//["a", "b", "c"]返回对象属性数组
/////////Object.keys遍历value/////////
 let obj={a:1,b:2,c:function(){}}
 Object.values(obj)//[1, 2, function]返回对象属性value值数组
/////////Object.entries遍历键值对/////////
 let obj={a:1,b:2,c:function(){}}
 Object.entries(obj)//[['a',1],['b', 2], ['c',function]]返回对象键值对数组
/////////Object.getOwnPropertyNames遍历属性(枚举+不可枚举)/////////
 let obj={a:1,b:2,c:function(){}}
 Object.getOwnPropertyNames(obj)//["a", "b", "c"]返回对象包括不可枚举的属性数组
 /////////////////////////////////////
 //Object.getOwnPropertySymbols()返回es6新数据类型symbol的属性数组；
 //Reflect.ownKeys()返回包括不可枚举属性、symbol类型属性在内的所有属性数组；
 



Object.asign()方法和jQuery里面的$.extend()方法及其相似，语法结构可以如是写:Object.asign(target,obj1,obj2….),target为操作对象/数组，后面的参数都是源对象。在操作object时，操作对象与源对象，如果属性不重合则拼接返回，若属性重合，则后者覆盖前者，拼接返回；在操作array时，也可以将其看作对象，其属性则是没一项的索引index，可以通过空值占位进行数组与数组直接的拼接。
 let obj={a:1,b:2};
Object.assin(obj,{c:3});//obj={a:1,b:2,c:3}

let obj1={a:1,b:2};
let obj2={a:'a',c:3};
Object.assign(obj1,obj2);//obj1={a:'a',b:2,c:3}

let obj1={a:1,b:2};
let obj2={a:'a',c:3};
Object.assign({},obj1,obj2);//返回新对象{a:'a',b:2,c:3}
///////////////////////////
let arr=[1,2,3];
Object.asign(arr,['a']);//arr=['a',2,3]

let arr1=[1,2,3];
let arr2=[,,,'a','b','c']
Object.asign([],arr1,arr2);//返回新数组[1, 2, 3, "a", "b"]
 


    </script>
﻿<!-- footer start -->
<div class="footer">
  <div class="w1190">
    <div class="index-link">
      <a href="http://www.alibabagroup.com/cn/global/home" target="_blank" class="index-link-a">阿里巴巴集团</a>
      <span>|</span>
      <a href="https://www.yunos.com/" target="_blank" class="index-link-a">云OS</a>
      <span>|</span>
      <a href="https://www.aliyun.com/" target="_blank" class="index-link-a">阿里云计算</a>
      <span>|</span>
      <a href="https://www.alimama.com/" target="_blank" class="index-link-a">阿里妈妈</a>
      <span>|</span>
      <a href="https://www.etao.com/" target="_blank" class="index-link-a">一淘</a>
      <span>|</span>
      <a href="https://ju.taobao.com/" target="_blank" class="index-link-a">聚划算</a>
      <span>|</span>
      <a href="https://www.tmall.com/" target="_blank" class="index-link-a">天猫</a>
      <span>|</span>
      <a href="https://www.taobao.com/" target="_blank" class="index-link-a">淘宝网</a>
      <span>|</span>
      <a href="http://seller.aliexpress.com/" target="_blank" class="index-link-a">全球速卖通</a>
      <span>|</span>
      <a href="https://www.1688.com/" target="_blank" class="index-link-a">阿里巴巴中国站</a>
      <span>|</span>
      <a href="https://www.alibaba.com/" target="_blank" class="index-link-a">支付宝</a>
    </div>
    <div class="index-link"> Copyright 2010-2018 淘工作. all rights reserved.浙ICP备11048174号-10</div>
  </div>
</div>
<!-- footer end -->    <!--右边浮动-->
    <div class="float-nav">
      <div class="gotop">
        <span><img src="https://img.alicdn.com/tps/TB1qaqKJVXXXXbGXVXXXXXXXXXX-42-42.jpg" /></span>
        <a href="#" class="float-navtext">顶部</a>
      </div>
      <div class="float-nav-app">
        <img class="appcode" src="https://img.alicdn.com/tps/TB1BwfGPVXXXXb2XFXXXXXXXXXX-280-280.png" alt="">
        <span><img class="app-tip-icon" src="https://img.alicdn.com/tps/TB1wFaQPVXXXXcVXFXXXXXXXXXX-19-22.png" alt=""></span>
        <a href="javascript:;" class="float-navtext">APP</a>
      </div>
     <div class="wx">
			    	 <img src="https://img.alicdn.com/tps/TB1iLfuNVXXXXcoXFXXXXXXXXXX-430-430.jpg" alt="微信二维码" title="微信二维码" class="wxcode">
			    	 <span><img src="https://img.alicdn.com/tps/TB1traZJVXXXXXVXFXXXXXXXXXX-42-42.jpg" /></span>
			    	 <a href="javascript:;" class="float-navtext">微信</a>
	 </div>
     <!--  <div>
        <span><img src="https://img.alicdn.com/tps/TB1unCIJVXXXXXlaXXXXXXXXXXX-42-40.jpg" /></span>
        <a  class="float-navtext">建议</a>
      </div> -->
      <div>
        <span><img src="https://img.alicdn.com/tps/TB1RQq6JVXXXXa2XpXXXXXXXXXX-42-42.jpg" /></span>
        <a href="/d/help/help.htm" target="_blank" class="float-navtext">帮助</a>
      </div>
    </div>
    <!--右边浮动-->

<script>
    tbtx.require("//img.imaijia.com/tbtx/zhaopin/2.0/js/common");
</script>
	<script src="/app/themes/clickPlus?id=148"></script>
	<div style="display:none"><script src=" "></script></div>
<!-- 统计代码 -->
<div style="display:none">
<script src="https://s4.cnzz.com/z_stat.php?id=1256648337&web_id=1256648337" language="JavaScript"></script>
</div><div style="display:none">
	<script src="https://s12.cnzz.com/z_stat.php?id=1261698472&web_id=1261698472" language="JavaScript"></script>
</div></body>
</html>
